package org.bbqqvv.backendeducation.service.auth;

import org.bbqqvv.backendeducation.config.jwt.JwtTokenUtil;
import org.bbqqvv.backendeducation.dto.request.AuthenticationRequest;
import org.bbqqvv.backendeducation.dto.request.UserCreationRequest;
import org.bbqqvv.backendeducation.dto.response.UserResponse;
import org.bbqqvv.backendeducation.service.UserService;
import org.bbqqvv.backendeducation.util.ValidateUtils;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import java.util.UUID;

@Service
public class AuthenticationService {
    private final UserService userService;
    private final PasswordEncoder passwordEncoder;
    private final AuthenticationManager authenticationManager;
    private final JwtTokenUtil jwtTokenUtil;

    public AuthenticationService(UserService userService,
                                 PasswordEncoder passwordEncoder,
                                 AuthenticationManager authenticationManager,
                                 JwtTokenUtil jwtTokenUtil) {
        this.userService = userService;
        this.passwordEncoder = passwordEncoder;
        this.authenticationManager = authenticationManager;
        this.jwtTokenUtil = jwtTokenUtil;
    }

    // ƒêƒÉng k√Ω ng∆∞·ªùi d√πng m·ªõi
    public UserResponse register(UserCreationRequest registerUserDto) {
        // Ki·ªÉm tra email h·ª£p l·ªá
        ValidateUtils.validateEmail(registerUserDto.getEmail());

        // Ki·ªÉm tra n·∫øu email ƒë√£ t·ªìn t·∫°i
        if (userService.existsByEmail(registerUserDto.getEmail())) {
            throw new RuntimeException("Email already exists");
        }

        // T·∫°o m·∫≠t kh·∫©u ng·∫´u nhi√™n v√† m√£ h√≥a n√≥
        String rawPassword = generateRandomPassword();
        String encodedPassword = passwordEncoder.encode(rawPassword);

        // T·∫°o ƒë·ªëi t∆∞·ª£ng UserCreationRequest m·ªõi v·ªõi m·∫≠t kh·∫©u ƒë√£ m√£ h√≥a
        UserCreationRequest userRequest = UserCreationRequest.builder()
                .fullName(registerUserDto.getFullName())
                .email(registerUserDto.getEmail())
                .password(encodedPassword)
                .studentId(registerUserDto.getStudentId())
                .studentClass(registerUserDto.getStudentClass())
                .role(registerUserDto.getRole())
                .build();

        // T·∫°o user v√† l∆∞u v√†o c∆° s·ªü d·ªØ li·ªáu
        UserResponse userResponse = userService.createUser(userRequest);

        // Tr·∫£ l·∫°i m·∫≠t kh·∫©u g·ªëc ƒë·ªÉ g·ª≠i qua email cho ng∆∞·ªùi d√πng
        userResponse.setPassword(rawPassword);

        return userResponse;
    }

    // ƒêƒÉng nh·∫≠p
    public String login(AuthenticationRequest loginUserDto) {
        // X√°c th·ª±c ng∆∞·ªùi d√πng
        Authentication authentication = authenticationManager.authenticate(
                new UsernamePasswordAuthenticationToken(loginUserDto.getEmail(), loginUserDto.getPassword())
        );

        org.springframework.security.core.userdetails.User userDetails =
                (org.springframework.security.core.userdetails.User) authentication.getPrincipal();

        // T·∫°o token ch·ª©a roles
        return jwtTokenUtil.generateToken(userDetails.getUsername(), userDetails.getAuthorities());
    }

    // ===============================
    // üöÄ Private method: T·∫°o m·∫≠t kh·∫©u ng·∫´u nhi√™n
    // ===============================
    private String generateRandomPassword() {
        return UUID.randomUUID().toString().substring(0, 8); // T·∫°o m·∫≠t kh·∫©u ng·∫´u nhi√™n d√†i 8 k√Ω t·ª±
    }
}
